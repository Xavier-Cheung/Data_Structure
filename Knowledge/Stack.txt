————————————————————————————————————————————————————————————————————————————————————————————————

一、定义栈：只允许在一端进行插入和删除操作的线性表
    ·栈顶、栈底、空栈
    ·特点：后进先出(LIFO)--last in first out

————————————————————————————————————————————————————————————————————————————————————————————————

二、基本操作(增删改查)
    · InitStack (& S)-------------------------初始化栈、构造一个空栈、分配内存空间
    · DestoryStack (& L)----------------------销毁栈、销毁并释放栈S所占的内存空间
    · Push (& S, x)---------------------------进栈、若栈S未满、则将x加入使之成为新栈顶
    · Pop (& S, & x)--------------------------出栈、若栈S未空、则弹出【删除】栈顶元素并用x返回
    · GetTop (S, &x)--------------------------读取栈顶元素、并用x返回【不会删除栈顶元素】
    · StackEmpty (S)--------------------------判断栈是否为空、若空则返回true、否则返回false
    · Length (L)------------------------------求表长
    · PrintList (L)---------------------------按线性表顺序输出

————————————————————————————————————————————————————————————————————————————————————————————————

三、栈的储存结构

Ⅰ 栈的顺序储存实现
    
    1> 栈的定义
    #define MaxSize 10              //栈中元素最大个数
    typedef struct {
        ElemType data[MaxSize];     //静态数组存放栈中元素
        int top;                    //栈顶指针、指向栈顶元素的位置
    } SqStack;              //注意这里用的是数组，所以top初始化不能为0，可以为-1

    2> 初始化栈
    void InitStack (SqStack &S) {
        S.top = -1;                 //初始化栈顶指针
    }

    3> 判断栈空
    bool StackEmpty (SqStack S) {
        if(S.top == -1)             //栈空
            return true;
        return false;
    }

    4> 进栈操作
    bool Push (SqStack &S, ElemType x) {
        if(S.top == MaxSize - 1)
            return false;
        S.data[++ S.top] = x;
        return true;
    }

    5> 出栈操作
    bool Pop (SqStack &S, ElemType &x) {
        if(S.top == -1)
            return false;
        x = S.data[S.top --];
        return true;
    }

    6> 读取栈顶元素
    bool GetTop (SqStack S, ElemType &x) {
        if(S.top == -1)
            return false;
        x = S.data[S.top];
        return true;
    }

    7> 销毁栈
    void DestoryStack(SqStack &S) {
        S.top = -1;
    }
    //还可以将top表示为可插入新元素的位置，此时初始化时top为0，判空为top==MaxSize

    ·附加： 共享栈【两个栈共享同一片空间】
        1)定义
        #define MaxSize 10
        typedef struct {
            ElemType data[MaxSize];
            int top0;                      //0号栈栈顶指针
            int top1;                      //1号栈栈顶指针
        } ShStack;

        2)初始化
        void InitStack(ShStack &S) {
            S.top0 = -1;                    //初始化栈顶指针
            S.top1 = MaxSize;
        }

        //栈满条件： top0 + 1 == top1

Ⅱ 栈的链式储存实现

    1> 栈的定义
    typedef struct LinkNode {
        ElemType data;                      //数据域
        struct LinkNode *next;              //指针域
    } *LiStack;
    //链头称为栈顶
    //进栈出栈操作都只能在头结点进行操作

    2> 带头结点的初始化/【推荐】不带头节点的初始化

    3> 进栈出栈
    进栈--链表的头插法
    出栈--删除第一个结点

    4> 查找栈顶元素--访问第一个结点元素即可
————————————————————————————————————————————————————————————————————————————————————————————————

四、常考题型
    ·卡特兰数：C(n,2n)/(n+1)    //进栈出栈顺序种数

————————————————————————————————————————————————————————————————————————————————————————————————