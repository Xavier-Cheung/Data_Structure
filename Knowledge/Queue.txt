——————————————————————————————————————————————————————————————————————————————————————————

一、定义队列：只允许在一端插入、在另一端输出的线性表
    
    ·队头：允许删除的一端
    ·队尾：允许插入的一端
    ·空队列
    ·特点：先进先出(FIFO) First in First out

——————————————————————————————————————————————————————————————————————————————————————————

二、队列的基本操作
    · InitQueue (& Q): 初始化队列、构造一个空队列
    · DestoryQueue (& Q): 销毁队列、销毁并释放队列Q所占的内存空间
    · EnQueue (& Q, x): 入队、若队列Q未满、将x插入、使之成为新的队尾
    · DeQueue (& Q, &x): 出队、若队列Q非空、删除队头元素并用x返回【会删除队头】
    · GetHead (Q, &x): 读取队头元素、若队列Q非空、则将队头元素赋值给x【不会删除队头】

——————————————————————————————————————————————————————————————————————————————————————————

三、队列的储存结构

Ⅰ 顺序储存实现队列
    
    1> 定义
    #define MaxSize 10
    typedef struct {
        ElemType data[MaxSize];             //用静态数组存放队列元素
        int front,rear;                     //队头指针和队尾指针
    } SqQueue;

    2> 初始化
    void InitQueue (SqQueue &Q) {
        Q.rear = Q.front = 0;               //初始时队头队尾指针都设置为0
    }

    3> 判空
    bool QueueEmpty (SqQueue Q) {
        if(Q.rear == Q.front)
            return true;
        return false;
    }

    4> 入队操作
    bool EnQueue (SqQueue &Q, ElemType x) {
        if(队列已满条件)                     //见循环队列
            return false;
        Q.data[Q.rear] = x;
        Q.rear = (Q.rear + 1) % MaxSize;    //将储存空间在逻辑上变成了“环”状
        return true;
    }

    ·附加：循环队列{
        Q.data[Q.rear] = x;
        Q.rear = (Q.rear + 1) % MaxSize; 
    }
    
    队列已满条件：(Q.rear + 1) % MaxSize == Q.front//代价--牺牲一个存储单元
    队列元素个数：(rear + MaxSize - front) % MaxSize
    
    5> 出队操作--只能让队头元素出队
    bool DeQueue (SqQueue &Q, ElemType &x) {
        if(Q.rear == Q.front)
            return false;                   //队空则报错
        x = Q.data[Q.front];
        Q.front = (Q.front + 1) % MaxSize;  //实现“逻辑循环”
        return true;
    }

    //另一种判断队空队满的方法，在结构体中定义一个int size
    //插入一个就++，删除一个就--当size==MaxSize时队满，size==0时队空

    6> 获得队头元素
    bool GetHead (SqQueue Q, ElemType x) {
        if(Q.rear == Q.front)
            return false;                   //空队则报错    
    }

    //第三种判断队列已满、已空的方法：
    //在结构体中定义一个int tag，每次删除成功tag=0,插入成功tag=1
    //因为只有删除操作可以使队空，插入使队满
    ·所以//队满条件：front==rear&&tag=1;
         //队空条件：front==rear&&tag=0；

Ⅱ 链式储存实现队列

    1> 定义
    typedef struct LinkNode {
        ElemType data;
        struct LinkNode *next;
    } LinkNode;

    typedef struct {
        LinkNode *front, *rear;
    } LinkQueue;

    2> 初始化
    void InitQueue (LinkQueue &Q) {
        //初始时 front和rear都指向头结点
        Q.front = Q.rear = (LinkNode *) malloc (sizeof(LinkNode));
        Q.front -> next =NULL;
    }

    3> 入队
    void EnQueue (LinkQueue &Q, ElemType x) { //带头结点
        LinkNode *temp = (LinkNode *) malloc (sizeof(LinkNode));
        temp -> data = x;
        temp -> next = NULL;
        Q.rear -> next = temp;
        Q.rear = temp;
    }
    //不带头节点需要改变front和rear，并且重置rear

    4> 出队
    bool DeQueue (LinkQueue &Q, ElemType &x) {
        if(Q.front == Q.rear)
            return false;                   //空队则报错
        LinkNode *temp = Q.front -> next;
        x = temp -> data;
        Q.front -> next = temp -> next;
        if(Q.rear == temp)
            Q.rear = Q.front;
        free(temp);
        return true;
    }

    5> 判空？见4> 的if条件

    6> 判满？不存在的

——————————————————————————————————————————————————————————————————————————————————————————

四、队列的应用
    ·双端队列--允许在两边进行插入和删除操作
    ·输入受限的双端队列
    ·输出受限的双端队列
    ·合法序列
    ·树的层次遍历
    ·图的广度优先遍历
    ·FCFS(First Come First Service)--先来先服务策略
    ·CPU的资源分配