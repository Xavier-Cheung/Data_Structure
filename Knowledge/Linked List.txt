————————————————————————————————————————————————————————————————————————————————————————————————

一、定义单链表
typedef struct LNode{
    ElemType data;                               //数据域
    struct LNode *next;                          //指向下一节点
} LNode,*LinkList;                               //LNode强调节点的声明,LinkList强调链表的声明

————————————————————————————————————————————————————————————————————————————————————————————————

二、初始化一个空的链表

----无头节点----
bool InitList(LinkList &L){
    L = NULL;                                    //空表，暂时无节点，防止脏数据
    return true;
}

----带头结点----
bool InitList(LinkList &L){
    L = (LNode *) malloc (sizeof(LNode));       //分配一个头结点
    if(L == NULL)                               //内存不足，分配失败
        return false;
    L -> next = NULL;                           //头节点之后暂时还没有其他节点
    return true;                                //初始化成功
}
————————————————————————————————————————————————————————————————————————————————————————————————

三、链表的判空
----无头节点----
bool Empty(LinkList L){
    if(L == NULL)
        return true;
    else
        return false;
}

----带头结点----
bool Empty(LinkList L){
    if(L -> next == NULL)
        return true;
    else
        return false;
}

————————————————————————————————————————————————————————————————————————————————————————————————

四、链表的插入

1>按位序插入

----带头结点----在L的i位序处插入元素e
bool ListInsert(LinkList &L, int i, ElemType e){
    if(i < 1)                                   //i值不合法
        return false;
    LNode *current = L;                         //current指向当前扫描的结点
    int cnt = 0;                                //记录current指向第几个结点
    while(current != NULL && cnt < i-1){        //循环找第i-1个结点
        current = current -> next;
        cnt++;
    }
    if(current == NULL)                         //i值不合法
        return false;
    LNode *temp = (LNode *) malloc (sizeof(LNode));//创建新节点进行插入操作
    temp -> data = e;                           //新节点数据赋值
    temp -> next = current -> next;             //先连接后面的
    current -> next = temp;                     //再连接到current后面
    return true;                                //插入成功
}

----无头结点----在L的i位序处插入元素e
bool ListInsert(LinkList &L, int i, ElemType e){
    if(i < 1)                                   //i值不合法
        return false;
    LNode *current = L;                         //记录当前结点
    LNode *temp = (LNode *) malloc (sizeof(LNode));//待插入的结点创建
    temp -> data = e;                           //新结点的赋值
    if(i == 1){                                 //因为无头结点，故头插特殊处理
        temp -> next = L;//直接连接
        L = temp;//更新头结点
        return true;
    }
    else{
        int cnt = 1;                            //因为无头结点，故位序从1开始
        while(current != NULL && cnt < i-1){    //以下同上一块代码
            current = current -> next;
            cnt++;
        }
        if(current == NULL)
            return false;
        temp ->next =current -> next;
        current -> next = temp;
        return true;
    }
}

2>指定节点处的插入

----指定节点的后插操作----[可以在上面的函数中被调用]
bool InsertNextNode(LNode *p, ElemType e){      //在p结点之后插入元素e
    if(p == NULL)
        return false;
    LNode *temp = (LNode *) malloc (sizeof(LNode));
    if(temp == NULL)                            //内存不足，分配失败
        return false;
    temp -> data = e;
    temp -> next = p -> next;                   //一定先连接后面，再连接前面
    p -> next = temp;
    return true;
}

----指定节点的前插操作----
bool InsertPriorNode(LNode *p, ElemType e){
    if(p == NULL)
        return false;
    LNode *temp = (LNode *) malloc (sizeof(LNode));
    if(temp == NULL)                            //内存不足，分配失败
        return false;
    temp -> next = p -> next;                   //采用后插，但将值交换即可
    p -> next = temp;//连接到p后面
    temp -> data = p -> data;//赋值
    p -> data = e;
    return true;
}

————————————————————————————————————————————————————————————————————————————————————————————————

五、链表的删除

1>按位序删除

----带头结点----删除链表中第i个位置的元素，并且用e返回删除的元素的值
bool ListDelete(LinkList &L, int i, ElemType &e){
    if(i < 1)
        return false;
    LNode *current = L;
    int cnt = 0;
    while(current != NULL && cnt < i-1){
        current = current -> next;
        cnt++;
    }
    if(current == NULL || p -> next ==NULL)
        return false;
    LNode *temp = current -> next;
    current -> next = temp -> next;
    e = temp -> data;
    free(temp);
    return true;
}

----无头结点----删除链表中第i个位置的元素，并且用e返回删除的元素的值
bool ListDelete(LinkList &L, int i, ElemType &e){
    if(i < 1)
        return false;
    LNode *temp;
    if(i == 1){
        temp = L;
        L = L -> next;
        e = temp -> data;
        free(temp);
        return true;
    }
    else{
        LNode *current = L;
        int cnt = 1;
        while(current != NULL && cnt < i-1){
            current = current -> next;
            cnt++;
        }
        temp = current ->next;
        e = temp -> data;
        current -> next = temp -> next;
        free(temp);
        return true;
    }
}

2>指定节点的删除

bool DeletNode(LNode * p){
    if(p == NULL)
        return false;
    if(p -> next == NULL){
        LNode *current = L;
        while(current -> next -> next != NULL){
            current = current -> next;
        }
        current -> next = NULL;
        free(p);
    }
    LNode *P_next = p -> next;
    p -> data = P_next -> data;
    p -> next = P_next -> next;
    free(P_next);
    return true;
}

————————————————————————————————————————————————————————————————————————————————————————————————

五、链表的查找

----按位查找----
//参考插入与删除中的查找部分
//建议独自封装一个函数调用在其它函数(如：插入函数)等中，更加方便

----按值查找----找到数据域==e的结点
LNode * LocateElem(LinkList L, ElemType e){
    LNode *current = L -> next;//从第一个节点开始查找e
    while(current != NULL && current -> data != e){
        current = current -> next;
    }
    return current;
}

————————————————————————————————————————————————————————————————————————————————————————————————

六、单链表的建立

----尾插法----[先初始化单链表，见上][带头结点//思考不带头结点:先输入到头结点，后面相同]
LinkList List_TailInsert(LinkList &L){
    int x;
    L = (LinkList) malloc (sizeof(LNode));
    LNode *temp, *tail = L;
    scanf("%d", &x);
    while(//建立链表的终止条件){
        temp = (LNode *) malloc (sizeof(LNode));
        temp -> data = x;
        tail -> next = temp;
        tail = temp;
        scanf("%d", &x);
    }
    tail -> next = NULL;
    return L;
}

----头插法----
LinkList List_HeadInsert(LinkList &L){//逆向建立单链表
    LNode *temp;
    int x;
    L = (LinkList *) malloc (sizeof(LinkList));
    L -> next = NULL;
    scanf("%d", &x);
    while(//建立链表的终止条件){
        temp = (LNode *) malloc (sizeof(LinkList));
        temp -> data = x;
        temp -> next = L -> next;
        L -> next = temp;
        scanf("%d", &x);
    }
    return L;
}

————————————————————————————————————————————————————————————————————————————————————————————————
